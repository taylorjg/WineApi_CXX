// WineApi.idl : IDL source for WineApi.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (WineApi.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

//*****************************************************************************
//* enum ReturnCode
//*****************************************************************************

[
	uuid(3C8A23D5-3052-46B5-B7D9-B2EE4FBC9F95),
	helpstring("A numerical code that identifies the status. A number of 0 means everything worked correctly.")
]
typedef enum ReturnCode
{
	ReturnCodeSuccess = 0,
	ReturnCodeCriticalError = 100,
	ReturnCodeUnableToAuthorize = 200,
	ReturnCodeNoAccess = 300
} ReturnCode;

//*****************************************************************************
//* enum SortOptions
//*****************************************************************************

[
	uuid(B697B012-116A-4B14-826C-06DE39F94639),
	helpstring("Supported sort options.")
]
typedef enum SortOptions
{
	SortOptionPopularity,
	SortOptionRating,
	SortOptionVintage,
	SortOptionWinery,
	SortOptionName,
	SortOptionPrice,
	SortOptionSaving,
	SortOptionJustIn
} SortOptions;

//*****************************************************************************
//* enum SortDirection
//*****************************************************************************

[
	uuid(B6B0A90F-D465-4D99-A636-CF9335DCDF04),
	helpstring("The direction in which to sort.")
]
typedef enum SortDirection
{
	SortDirectionAscending,
	SortDirectionDescending,
} SortDirection;

//*****************************************************************************
//* Forward declarations for interfaces
//*****************************************************************************

interface IAppellation;
interface IArea;
interface IArticle;
interface IBook;
interface ICategory;
interface ICategoryMap;
interface ICommunity;
interface ICommunityReview;
interface ICommunityReviews;
interface IFootnote;
interface IGeoLocation;
interface ILabel;
interface IProduct;
interface IProductAttribute;
interface IProducts;
interface IRating;
interface IRatings;
interface IReference;
interface IRefinement;
interface IRegion;
interface IRetail;
interface IStatus;
interface IVarietal;
interface IVineyard;
interface IVintage;
interface IVintages;
interface IWineType;

interface IWineApiObjectCollection;
interface IWineApiStringCollection;

//*****************************************************************************
//* interface IAppellation
//*****************************************************************************

[
	object,
	uuid(5D0DEF55-F950-4F6E-8B74-2F2B586561A1),
	dual,
	helpstring("An appellation."),
	pointer_default(unique)
]
interface IAppellation : IDispatch
{
	[propget, id(1), helpstring("A unique (Endeca) identifier for the appellation.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the appellation.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the other products in the same appellation.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The region that corresponds to the appellation.")]
	HRESULT Region([out, retval] IRegion** Region);
};

//*****************************************************************************
//* interface IArea
//*****************************************************************************

[
	object,
	uuid(19BEA1BB-47CA-4814-9F95-1CFC07F99B5B),
	dual,
	helpstring("This defines a high level area that the wine belongs to. An example would be \"New World\", or \"France\"."),
	pointer_default(unique)
]
interface IArea : IDispatch
{
	[propget, id(1), helpstring("A unique (Endeca) identifier for the area.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the area.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the other products in the same area.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("If there is a higher area classification, this will be populated with the parent. An example could be an area called \"Old World\" which would be the parent of an area called \"France\". This could be null.")]
	HRESULT Parent([out, retval] IArea** Parent);
};

//*****************************************************************************
//* interface IArticle
//*****************************************************************************

[
	object,
	uuid(CD1AD367-5C42-4126-872C-4908AF7A87F5),
	dual,
	helpstring("An article."),
	pointer_default(unique)
]
interface IArticle : IDispatch
{
	[propget, id(1), helpstring("The article identifier.")]
	HRESULT Id([out, retval] BSTR* Id);

	[propget, id(2), helpstring("Descriptive name for the article.")]
	HRESULT Title([out, retval] BSTR* Title);

	[propget, id(3), helpstring("A short description, or abstract, for the article.")]
	HRESULT Abstract([out, retval] BSTR* Abstract);

	[propget, id(4), helpstring("The article content. This is only populated when the article identifier is specified in the filter. Only available with \"partner\" access.")]
	HRESULT Content([out, retval] BSTR* Content);

	[propget, id(5), helpstring("A url to the article on the wine.com website.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(6), helpstring("Footnotes to other articles that are related to this article.")]
	HRESULT Footnotes([out, retval] IWineApiObjectCollection** Footnotes);
};

//*****************************************************************************
//* interface IBook
//*****************************************************************************

[
	object,
	uuid(87B85F54-8EB4-4356-9B78-95F5B66498B5),
	dual,
	helpstring("A book is defined as a section of the Wine.com reference library. An example would be \"Wine Basics\" or \"Selecting Wines\"."),
	pointer_default(unique)
]
interface IBook : IDispatch
{
	[propget, id(1), helpstring("The book identifier.")]
	HRESULT Id([out, retval] BSTR* Id);

	[propget, id(2), helpstring("Descriptive name for the book.")]
	HRESULT Title([out, retval] BSTR* Title);

	[propget, id(3), helpstring("The articles that make up the book.")]
	HRESULT Articles([out, retval] IWineApiObjectCollection** Articles);
};

//*****************************************************************************
//* interface ICatalog
//*****************************************************************************

[
	object,
	uuid(BB7DF7A5-211A-431E-83D2-3E42CA803F72),
	dual,
	helpstring("This object is returned when a call is made to the Catalog API."),
	pointer_default(unique)
]
interface ICatalog : IDispatch
{
	[propget, id(1), helpstring("Contains status and debugging information.")]
	HRESULT Status([out, retval] IStatus** Status);

	[propget, id(2), helpstring("This object contains products that match the catalog query.")]
	HRESULT Products([out, retval] IProducts** Products);
};

//*****************************************************************************
//* interface ICategory
//*****************************************************************************

[
	object,
	uuid(BD72D908-3638-41AF-A4BF-C1BBE08C29C5),
	dual,
	helpstring("A category."),
	pointer_default(unique)
]
interface ICategory : IDispatch
{
	[propget, id(1), helpstring("The category identifier (Endeca Dimension Id).")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("Descriptive name for the category.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The category options.")]
	HRESULT Refinements([out, retval] IWineApiObjectCollection** Refinements);
};

//*****************************************************************************
//* interface ICategoryMap
//*****************************************************************************

[
	object,
	uuid(3BFF6C9C-5CC3-4347-B249-1D09BB4E8B78),
	dual,
	helpstring("This object is returned when a call is made to the Category Map API. It returns possible category matches based off a provided query."),
	pointer_default(unique)
]
interface ICategoryMap : IDispatch
{
	[propget, id(1), helpstring("Contains status and debugging information.")]
	HRESULT Status([out, retval] IStatus** Status);

	[propget, id(2), helpstring("A list of categories that match the provided query.")]
	HRESULT Categories([out, retval] IWineApiObjectCollection** Categories);
};

//*****************************************************************************
//* interface ICommunity
//*****************************************************************************

[
	object,
	uuid(5563693C-3FB4-4D22-A9F8-6AED9DD5C348),
	dual,
	helpstring("This object contains summaries the community content, as well as access to the more detailed community information."),
	pointer_default(unique)
]
interface ICommunity : IDispatch
{
	[propget, id(1), helpstring("The url to the product detail page that contains the community notes.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(2), helpstring("A collection of reviews that community members have written.")]
	HRESULT Reviews([out, retval] ICommunityReviews** Reviews);
};

//*****************************************************************************
//* interface ICommunityReview
//*****************************************************************************

[
	object,
	uuid(3A545728-BE93-4B5D-A1EF-3F48FF2DBF6B),
	dual,
	helpstring("A community review of a product."),
	pointer_default(unique)
]
interface ICommunityReview : IDispatch
{
	[propget, id(1), helpstring("The unique (Endeca) id for the publication.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name, or description, of the review or publication.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The score given to the product.")]
	HRESULT Score([out, retval] long* Score);

	[propget, id(4), helpstring("The full description of the review.")]
	HRESULT Description([out, retval] BSTR* Description);

	[propget, id(5), helpstring("A url to other products that have been reviewed by the same publication.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface ICommunityReviews
//*****************************************************************************

[
	object,
	uuid(FFB91875-D954-4D3D-8050-5AF85296CFA3),
	dual,
	helpstring("Summaries all of the community reviews."),
	pointer_default(unique)
]
interface ICommunityReviews : IDispatch
{
	[propget, id(1), helpstring("The highest review score given to the product.")]
	HRESULT HighestScore([out, retval] long* HighestScore);

	[propget, id(2), helpstring("The url to the full list of reviews.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(3), helpstring("A collection of reviews that have been given to the product. Only available with \"partner\" access.")]
	HRESULT List([out, retval] IWineApiObjectCollection** List);
};

//*****************************************************************************
//* interface IFootnote
//*****************************************************************************

[
	object,
	uuid(19BD583B-F9A5-4F0A-9636-B8A9B2F9320E),
	dual,
	helpstring("A footnote."),
	pointer_default(unique)
]
interface IFootnote : IDispatch
{
	[propget, id(1), helpstring("The article identifier.")]
	HRESULT Id([out, retval] BSTR* Id);

	[propget, id(2), helpstring("Descriptive name for the article.")]
	HRESULT Title([out, retval] BSTR* Title);

	[propget, id(3), helpstring("A url to the article on the wine.com website.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface IGeoLocation
//*****************************************************************************

[
	object,
	uuid(01809819-7A29-4FDB-8430-448EBC4FE9A3),
	dual,
	helpstring("Identifies a latitude and longitude for the location of the grapes, or winery, that produced the wine."),
	pointer_default(unique)
]
interface IGeoLocation : IDispatch
{
	[propget, id(1), helpstring("The latitude of the location. If this data does not exist (or you do not have access to it), the value returned will be -360.")]
	HRESULT Latitude([out, retval] long* Latitude);

	[propget, id(2), helpstring("The longitude of the location. If this data does not exist (or you do not have access to it), the value returned will be -360.")]
	HRESULT Longitude([out, retval] long* Longitude);

	[propget, id(3), helpstring("The url to a map of the wine.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface ILabel
//*****************************************************************************

[
	object,
	uuid(D89D3E74-681B-4B2F-8682-66EF2F925BBC),
	dual,
	helpstring("A label for a product."),
	pointer_default(unique)
]
interface ILabel : IDispatch
{
	[propget, id(1), helpstring("A unique identifier for the label.")]
	HRESULT Id([out, retval] BSTR* Id);

	[propget, id(2), helpstring("The name, or description, of the label.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the label.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface IProduct
//*****************************************************************************

[
	object,
	uuid(81BB218A-3DED-4941-8BDB-F773E82ED0F7),
	dual,
	helpstring("This is the actual product object. When in a list format some of these values will be null. A full object will only be populated when the product identifier is specified in the query."),
	pointer_default(unique)
]
interface IProduct : IDispatch
{
	[propget, id(1), helpstring("A unique identifier for the product.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The product name.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("Additional information that may accompany the product. Only available with \"partner\" access.")]
	HRESULT Description([out, retval] BSTR* Description);

	[propget, id(4), helpstring("The url to the product detail.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(5), helpstring("The starting point for the price. Prices could be higher in certain markets, but they will never be lower than this price.")]
	HRESULT PriceMin([out, retval] double* PriceMin);

	[propget, id(6), helpstring("The maximum price point across all markets for this product.")]
	HRESULT PriceMax([out, retval] double* PriceMax);

	[propget, id(7), helpstring("The suggested retail price for the product.")]
	HRESULT PriceRetail([out, retval] double* PriceRetail);

	[propget, id(8), helpstring("Identifies the type of product that is being described. See the list of possible product type options.")]
	HRESULT Type([out, retval] BSTR* Type);

	[propget, id(9), helpstring("The year, or vintage of the product. If the product is not a bottle of wine, then the string will be empty. If the product is a bottle of wine, but has no vintage, it will have a designation of \"Non-Vintage\".")]
	HRESULT Year([out, retval] BSTR* Year);

	[propget, id(10), helpstring("The location of the grapes, or winery, that produced this wine. Only available with \"partner\" access.")]
	HRESULT GeoLocation([out, retval] IGeoLocation** GeoLocation);

	[propget, id(11), helpstring("The appellation that the product belongs. Note, not all products have appellations. This can be null.")]
	HRESULT Appellation([out, retval] IAppellation** Appellation);

	[propget, id(12), helpstring("The varietal that the product belongs to. Note, not all products have a varietal. This can be null.")]
	HRESULT Varietal([out, retval] IVarietal** Varietal);

	[propget, id(13), helpstring("The vineyard that the product belongs to. Note, not all products have a vineyard. This can be null.")]
	HRESULT Vineyard([out, retval] IVineyard** Vineyard);

	[propget, id(14), helpstring("A collection of ratings that have been given to the product.")]
	HRESULT Ratings([out, retval] IRatings** Ratings);

	[propget, id(15), helpstring("Retail properties for the product. This is only available when the state is specified, otherwise it is null.")]
	HRESULT Retail([out, retval] IRetail** Retail);

	[propget, id(16), helpstring("A list of other vintages of this wine. Only available with \"partner\" access.")]
	HRESULT Vintages([out, retval] IVintages** Vintages);

	[propget, id(17), helpstring("Wine.com community information.")]
	HRESULT Community([out, retval] ICommunity** Community);

	[propget, id(18), helpstring("A collection of additional attributes that define the product.")]
	HRESULT ProductAttributes([out, retval] IWineApiObjectCollection** ProductAttributes);

	[propget, id(19), helpstring("A collection of labels that go with the product.")]
	HRESULT Labels([out, retval] IWineApiObjectCollection** Labels);
};

//*****************************************************************************
//* interface IProductAttribute
//*****************************************************************************

[
	object,
	uuid(B67475D6-8DD4-4C9B-BAD6-9271A1E8D3C4),
	dual,
	helpstring("This identifies other attributes that describe the product. Some examples would be \"Kosher\" or \"Collectible\" or \"Screw Cap\"."),
	pointer_default(unique)
]
interface IProductAttribute : IDispatch
{
	[propget, id(1), helpstring("The unique (Endeca) id for the attribute.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name, or description, of the attribute.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("A url to other products that have the same attribute.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The url to an icon for the product attribute.")]
	HRESULT ImageUrl([out, retval] BSTR* ImageUrl);
};

//*****************************************************************************
//* interface IProducts
//*****************************************************************************

[
	object,
	uuid(D96ADEE5-37CE-4B12-A354-F6E9D8626993),
	dual,
	helpstring("This is a list of products."),
	pointer_default(unique)
]
interface IProducts : IDispatch
{
	[propget, id(1), helpstring("The total number of products that match the query. Not all products will be returned.")]
	HRESULT Total([out, retval] long* Total);

	[propget, id(2), helpstring("The starting position in the entire list.")]
	HRESULT Offset([out, retval] long* Offset);

	[propget, id(3), helpstring("The url to the list of wines.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The actual list of products.")]
	HRESULT List([out, retval] IWineApiObjectCollection** List);
};

//*****************************************************************************
//* interface IRating
//*****************************************************************************

[
	object,
	uuid(D5B0979D-14EE-4DA9-BC95-9EEE539D8B8C),
	dual,
	helpstring("A product rating."),
	pointer_default(unique)
]
interface IRating : IDispatch
{
	[propget, id(1), helpstring("The unique (Endeca) id for the publication.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name, or description, of the review or publication.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The score given to the product.")]
	HRESULT Score([out, retval] long* Score);

	[propget, id(4), helpstring("A url to other products that have been reviewed by the same publication.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface IRatings
//*****************************************************************************

[
	object,
	uuid(07FAE185-EEBE-4C37-BFA6-A93F28990C1F),
	dual,
	helpstring("A collection of ratings."),
	pointer_default(unique)
]
interface IRatings : IDispatch
{
	[propget, id(1), helpstring("The highest score given to the product.")]
	HRESULT HighestScore([out, retval] long* HighestScore);

	[propget, id(2), helpstring("A collection of ratings that have been given to the product. Only available with \"partner\" access.")]
	HRESULT List([out, retval] IWineApiObjectCollection** List);
};

//*****************************************************************************
//* interface IReference
//*****************************************************************************

[
	object,
	uuid(D148803C-A8AE-47E7-A984-E482746527BC),
	dual,
	helpstring("This object is returned when a call is made to the Reference Library API."),
	pointer_default(unique)
]
interface IReference : IDispatch
{
	[propget, id(1), helpstring("Contains status and debugging information.")]
	HRESULT Status([out, retval] IStatus** Status);

	[propget, id(2), helpstring("A list of reference sections, or books.")]
	HRESULT Books([out, retval] IWineApiObjectCollection** Books);
};

//*****************************************************************************
//* interface IRefinement
//*****************************************************************************

[
	object,
	uuid(BE8D6329-FC4A-472A-BEE6-7F2B6D051B75),
	dual,
	helpstring("A refinement is the actual category value."),
	pointer_default(unique)
]
interface IRefinement : IDispatch
{
	[propget, id(1), helpstring("The refinement identifier (Endeca Dimension Value Id).")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("Describe name for the refinement. \"Red Wine\" for example.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("A url to products that map to this category refinement. This includes the original filter. For example, if you are looking for all child categories for the category Red Wines, the Merlot value will include the Red Wine value.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface IRegion
//*****************************************************************************

[
	object,
	uuid(0BE22B32-DF39-47AD-B44C-A3DC8CD68C66),
	dual,
	helpstring("A wine region."),
	pointer_default(unique)
]
interface IRegion : IDispatch
{
	[propget, id(1), helpstring("A unique (Endeca) identifier for the region.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the region.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the other products in the same region.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The area that the region belongs to. This could be null.")]
	HRESULT Area([out, retval] IArea** Area);
};

//*****************************************************************************
//* interface IRetail
//*****************************************************************************

[
	object,
	uuid(78F07435-050F-4D02-B27D-C37D380A2602),
	dual,
	helpstring("This identifies retail values for the purchase of this product. Only available when the destination state is specified using the \"state\" url value."),
	pointer_default(unique)
]
interface IRetail : IDispatch
{
	[propget, id(1), helpstring("The unique sku for the product.")]
	HRESULT Sku([out, retval] BSTR* Sku);

	[propget, id(2), helpstring("Indicates whether or not the product is in stock.")]
	HRESULT InStock([out, retval] VARIANT_BOOL* InStock);

	[propget, id(3), helpstring("Wine.com sales price for the product.")]
	HRESULT Price([out, retval] double* Price);

	[propget, id(4), helpstring("The url for purchasing this product.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(5), helpstring("The desired ship to state.")]
	HRESULT State([out, retval] BSTR* State);
};

//*****************************************************************************
//* interface IStatus
//*****************************************************************************

[
	object,
	uuid(E06B4384-2B1F-4D5C-977B-F2D265679E20),
	dual,
	helpstring("This object is returned with every query. It contains a status code, and any debugging information that might accompany an error."),
	pointer_default(unique)
]
interface IStatus : IDispatch
{
	[propget, id(1), helpstring("A numerical code that identifies the status. A number of 0 means everything worked correctly.")]
	HRESULT ReturnCode([out, retval] long* ReturnCode);

	[propget, id(2), helpstring("Returns a list of messages that contain debugging information to assist with correcting the issue.")]
	HRESULT Messages([out, retval] IWineApiStringCollection** Messages);
};

//*****************************************************************************
//* interface IVarietal
//*****************************************************************************

[
	object,
	uuid(F75590F1-8FFB-4560-A680-163B2AF00BE0),
	dual,
	helpstring("A varietal."),
	pointer_default(unique)
]
interface IVarietal : IDispatch
{
	[propget, id(1), helpstring("A unique (Endeca) identifier for the varietal.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the varietal.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to other products that have the same varietal.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The type of wine that the varietal corresponds to.")]
	HRESULT WineType([out, retval] IWineType** WineType);
};

//*****************************************************************************
//* interface IVineyard
//*****************************************************************************

[
	object,
	uuid(A62234F2-AD0F-43BB-973E-8BE604602DCC),
	dual,
	helpstring("A vineyard."),
	pointer_default(unique)
]
interface IVineyard : IDispatch
{
	[propget, id(1), helpstring("A unique identifier for the vineyard.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the vineyard.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the description of the vineyard.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("The url to an image of the vineyard.")]
	HRESULT ImageUrl([out, retval] BSTR* ImageUrl);

	[propget, id(5), helpstring("The location of the vineyard. Only available with \"partner\" access.")]
	HRESULT GeoLocation([out, retval] IGeoLocation** GeoLocation);
};

//*****************************************************************************
//* interface IVintage
//*****************************************************************************

[
	object,
	uuid(84D5E4AC-D3D6-4030-85AE-54D18CF9FA02),
	dual,
	helpstring("This links a product to other vintages, and lists some additional attributes of these products."),
	pointer_default(unique)
]
interface IVintage : IDispatch
{
	[propget, id(1), helpstring("The product id of the related vintage.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The year, or vintage, of the related product.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to the product detail for this vintage.")]
	HRESULT Url([out, retval] BSTR* Url);

	[propget, id(4), helpstring("A collection of ratings that have been given to this specific vintage.")]
	HRESULT Ratings([out, retval] IRatings** Ratings);
};

//*****************************************************************************
//* interface IVintages
//*****************************************************************************

[
	object,
	uuid(647D676E-475E-4C15-9BB7-9A8DFAB902FD),
	dual,
	helpstring("This is also referred to as pedigree. This is a list of past vintages of the selected product."),
	pointer_default(unique)
]
interface IVintages : IDispatch
{
	[propget, id(1), helpstring("A specific vintage that the product is related to.")]
	HRESULT List([out, retval] IWineApiObjectCollection** List);
};

//*****************************************************************************
//* interface IWineApiObjectCollection
//*****************************************************************************

[
	object,
	uuid(BE2BB08A-58FE-40C8-9C29-F2B726B0C19A),
	dual,
	helpstring("IWineApiObjectCollection Interface"),
	pointer_default(unique)
]
interface IWineApiObjectCollection : IDispatch
{
	[propget, id(1), helpstring("The number of items in the collection.")]
	HRESULT Count([out, retval] long* Count);

	[propget, id(DISPID_VALUE), helpstring("Indexed property giving access to items in the collection. The index is 0-based.")]
	HRESULT Item([in] long Index, [out, retval] IDispatch** Item);

	[propget, id(DISPID_NEWENUM), helpstring("An enumerator that allows the collection to be iterated over.")]
	HRESULT _NewEnum([out, retval] IUnknown** Enum);
};

//*****************************************************************************
//* interface IWineApiStringCollection
//*****************************************************************************

[
	object,
	uuid(7DE0C290-9E80-479F-8829-189B76E2B12D),
	dual,
	helpstring("IWineApiStringCollection Interface"),
	pointer_default(unique)
]
interface IWineApiStringCollection : IDispatch
{
	[propget, id(1), helpstring("The number of items in the collection.")]
	HRESULT Count([out, retval] long* Count);

	[propget, id(DISPID_VALUE), helpstring("Indexed property giving access to items in the collection. The index is 0-based.")]
	HRESULT Item([in] long Index, [out, retval] BSTR* Item);

	[propget, id(DISPID_NEWENUM), helpstring("An enumerator that allows the collection to be iterated over.")]
	HRESULT _NewEnum([out, retval] IUnknown** Enum);
};

//*****************************************************************************
//* interface IWineType
//*****************************************************************************

[
	object,
	uuid(F596011D-FF0A-4E91-814E-AF7A9B5FAB9D),
	dual,
	helpstring("A wine type."),
	pointer_default(unique)
]
interface IWineType : IDispatch
{
	[propget, id(1), helpstring("A unique (Endeca) identifier for the type of wine.")]
	HRESULT Id([out, retval] long* Id);

	[propget, id(2), helpstring("The name of the type of wine.")]
	HRESULT Name([out, retval] BSTR* Name);

	[propget, id(3), helpstring("The url to other products that have the same wine type.")]
	HRESULT Url([out, retval] BSTR* Url);
};

//*****************************************************************************
//* interface IConfig
//*****************************************************************************

[
	object,
	uuid(BACF1BE0-7A6D-4DEE-BBEE-38C0CCB3BFE9),
	dual,
	helpstring("Use this (singleton) class to configure WineApi."),
	pointer_default(unique)
]
interface IConfig : IDispatch
{
	[propget, id(1), helpstring("The key given to the developer that is requesting the resource.")]
	HRESULT ApiKey([out, retval] BSTR* ApiKey);

	[propput, id(1), helpstring("The key given to the developer that is requesting the resource.")]
	HRESULT ApiKey([in] BSTR ApiKey);

	[propget, id(2), helpstring("The version of the API to use.")]
	HRESULT Version([out, retval] BSTR* Version);

	[propput, id(2), helpstring("The version of the API to use.")]
	HRESULT Version([in] BSTR Version);

	[propget, id(3), helpstring("After signing up with LinkShare, use the \"affiliateId\" parameter to pass your affiliate code to the API.")]
	HRESULT AffiliateId([out, retval] BSTR* AffiliateId);

	[propput, id(3), helpstring("After signing up with LinkShare, use the \"affiliateId\" parameter to pass your affiliate code to the API.")]
	HRESULT AffiliateId([in] BSTR AffiliateId);
};

//*****************************************************************************
//* interface ICategoryMapService
//*****************************************************************************

[
	object,
	uuid(618D119B-366C-486B-89C0-72B357837DE8),
	dual,
	helpstring("This query returns the various categories and their children. These categories can then be used to retrieve products using the \"filter\" option."),
	pointer_default(unique)
]
interface ICategoryMapService : IDispatch
{
	[id(1),  helpstring("Executes the CategoryMap query and returns a CategoryMap object.")]
	HRESULT Execute([out, retval] ICategoryMap** CategoryMap);

	[id(2),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 1 category.")]
	HRESULT CategoryFilter1([in] long Id1, [out, retval] ICategoryMapService** Self);

	[id(3),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 2 categories.")]
	HRESULT CategoryFilter2([in] long Id1, [in] long Id2, [out, retval] ICategoryMapService** Self);

	[id(4),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 3 categories.")]
	HRESULT CategoryFilter3([in] long Id1, [in] long Id2, [in] long Id3, [out, retval] ICategoryMapService** Self);

	[id(5),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 4 categories.")]
	HRESULT CategoryFilter4([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [out, retval] ICategoryMapService** Self);

	[id(6),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 5 categories.")]
	HRESULT CategoryFilter5([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [in] long Id5, [out, retval] ICategoryMapService** Self);

	[id(7),  helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter."), vararg]
	HRESULT CategoryFilter([in] SAFEARRAY(VARIANT) Categories, [out, retval] ICategoryMapService** Self);

	[id(8),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 1 search term.")]
	HRESULT Search1([in] BSTR Term1, [out, retval] ICategoryMapService** Self);

	[id(9),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 2 search terms.")]
	HRESULT Search2([in] BSTR Term1, [in] BSTR Term2, [out, retval] ICategoryMapService** Self);

	[id(10),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 3 search terms.")]
	HRESULT Search3([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [out, retval] ICategoryMapService** Self);

	[id(11),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 4 search terms.")]
	HRESULT Search4([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [in] BSTR Term4, [out, retval] ICategoryMapService** Self);

	[id(12),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 5 search terms.")]
	HRESULT Search5([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [in] BSTR Term4, [in] BSTR Term5, [out, retval] ICategoryMapService** Self);

	[id(13),  helpstring("Adds the \"search\" custom parameter to the query."), vararg]
	HRESULT Search([in] SAFEARRAY(VARIANT) Terms, [out, retval] ICategoryMapService** Self);

	[id(14),  helpstring("Lists all items in the given category. Convenience method taking 1 category.")]
	HRESULT Show1([in] long Category1, [out, retval] ICategoryMapService** Self);

	[id(15),  helpstring("Lists all items in the given categories. Convenience method taking 2 categories.")]
	HRESULT Show2([in] long Category1, [in] long Category2, [out, retval] ICategoryMapService** Self);

	[id(16),  helpstring("Lists all items in the given categories. Convenience method taking 3 categories.")]
	HRESULT Show3([in] long Category1, [in] long Category2, [in] long Category3, [out, retval] ICategoryMapService** Self);

	[id(17),  helpstring("Lists all items in the given categories. Convenience method taking 4 categories.")]
	HRESULT Show4([in] long Category1, [in] long Category2, [in] long Category3, [in] long Category4, [out, retval] ICategoryMapService** Self);

	[id(18),  helpstring("Lists all items in the given categories. Convenience method taking 5 categories.")]
	HRESULT Show5([in] long Category1, [in] long Category2, [in] long Category3, [in] long Category4, [in] long Category5, [out, retval] ICategoryMapService** Self);

	[id(19),  helpstring("Lists all items in the given categories."), vararg]
	HRESULT Show([in] SAFEARRAY(VARIANT) Categories, [out, retval] ICategoryMapService** Self);
};

//*****************************************************************************
//* interface ICatalogService
//*****************************************************************************

[
	object,
	uuid(32DBCC18-E5F2-47F2-9394-08164842CBF8),
	dual,
	helpstring("Catalog queries give complete access to the Wine.com product catalog, including professional ratings, labels, styles of wines, and all other attributes associated with Wines."),
	pointer_default(unique)
]
interface ICatalogService : IDispatch
{
	[id(1),  helpstring("Executes the Catalog query and returns a Catalog object.")]
	HRESULT Execute([out, retval] ICatalog** Catalog);

	[id(2),  helpstring("Adds the \"offset\" custom parameter to the query.")]
	HRESULT Offset([in] long Offset, [out, retval] ICatalogService** Self);

	[id(3),  helpstring("Adds the \"size\" custom parameter to the query. The number of records to return in a list. Max is 100, default is 5.")]
	HRESULT Size([in] long Size, [out, retval] ICatalogService** Self);

	[id(4),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 1 search term.")]
	HRESULT Search1([in] BSTR Term1, [out, retval] ICatalogService** Self);

	[id(5),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 2 search terms.")]
	HRESULT Search2([in] BSTR Term1, [in] BSTR Term2, [out, retval] ICatalogService** Self);

	[id(6),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 3 search terms.")]
	HRESULT Search3([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [out, retval] ICatalogService** Self);

	[id(7),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 4 search terms.")]
	HRESULT Search4([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [in] BSTR Term4, [out, retval] ICatalogService** Self);

	[id(8),  helpstring("Adds the \"search\" custom parameter to the query. Convenience method taking 5 search terms.")]
	HRESULT Search5([in] BSTR Term1, [in] BSTR Term2, [in] BSTR Term3, [in] BSTR Term4, [in] BSTR Term5, [out, retval] ICatalogService** Self);

	[id(9),  helpstring("Adds the \"search\" custom parameter to the query."), vararg]
	HRESULT Search([in] SAFEARRAY(VARIANT) Terms, [out, retval] ICatalogService** Self);

	[id(10), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 1 category.")]
	HRESULT CategoryFilter1([in] long Id1, [out, retval] ICatalogService** Self);

	[id(11), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 2 categories.")]
	HRESULT CategoryFilter2([in] long Id1, [in] long Id2, [out, retval] ICatalogService** Self);

	[id(12), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 3 categories.")]
	HRESULT CategoryFilter3([in] long Id1, [in] long Id2, [in] long Id3, [out, retval] ICatalogService** Self);

	[id(13), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 4 categories.")]
	HRESULT CategoryFilter4([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [out, retval] ICatalogService** Self);

	[id(14), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 5 categories.")]
	HRESULT CategoryFilter5([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [in] long Id5, [out, retval] ICatalogService** Self);

	[id(15), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter."), vararg]
	HRESULT CategoryFilter([in] SAFEARRAY(VARIANT) Categories, [out, retval] ICatalogService** Self);

	[id(16), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"rating\" filter.")]
	HRESULT RatingFromFilter([in] long From, [out, retval] ICatalogService** Self);

	[id(17), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"rating\" filter.")]
	HRESULT RatingFromToFilter([in] long From, [in] long To, [out, retval] ICatalogService** Self);

	[id(18), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"price\" filter. Only supported when the state parameter is provided.")]
	HRESULT PriceFromFilter([in] double From, [out, retval] ICatalogService** Self);

	[id(19), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"price\" filter. Only supported when the state parameter is provided.")]
	HRESULT PriceFromToFilter([in] double From, [in] double To, [out, retval] ICatalogService** Self);

	[id(20), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided. Convenience method taking 1 product.")]
	HRESULT ProductFilter1([in] long Id1, [out, retval] ICatalogService** Self);

	[id(21), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided. Convenience method taking 2 products.")]
	HRESULT ProductFilter2([in] long Id1, [in] long Id2, [out, retval] ICatalogService** Self);

	[id(22), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided. Convenience method taking 3 products.")]
	HRESULT ProductFilter3([in] long Id1, [in] long Id2, [in] long Id3, [out, retval] ICatalogService** Self);

	[id(23), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided. Convenience method taking 4 products.")]
	HRESULT ProductFilter4([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [out, retval] ICatalogService** Self);

	[id(24), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided. Convenience method taking 5 products.")]
	HRESULT ProductFilter5([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [in] long Id5, [out, retval] ICatalogService** Self);

	[id(25), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"product\" filter. When this is specified, full product details are provided."), vararg]
	HRESULT ProductFilter([in] SAFEARRAY(VARIANT) Products, [out, retval] ICatalogService** Self);

	[id(26), helpstring("Adds the \"state\" custom parameter to the query. This is optional. If it is not present, retail information will not be displayed.")]
	HRESULT State([in] BSTR State, [out, retval] ICatalogService** Self);

	[id(27), helpstring("Adds the \"sort\" custom parameter to the query.")]
	HRESULT SortBy([in] enum SortOptions SortOption, [in] enum SortDirection SortDirection, [out, retval] ICatalogService** Self);

	[id(28), helpstring("Adds the \"instock\" custom parameter to the query. Limit the results to in stock products only (should be coupled with the state parameter).")]
	HRESULT InStock([in] VARIANT_BOOL InStock, [out, retval] ICatalogService** Self);
};

//*****************************************************************************
//* interface IReferenceService
//*****************************************************************************

[
	object,
	uuid(49A4F778-ECC9-40D1-BFBA-A64763AF276B),
	dual,
	helpstring("The reference library API exposes all of the articles, blogs, and content Wine.com has about wine."),
	pointer_default(unique)
]
interface IReferenceService : IDispatch
{
	[id(1), helpstring("Executes the Reference query and returns a Reference object.")]
	HRESULT Execute([out, retval] IReference** Reference);

	[id(2), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 1 category.")]
	HRESULT CategoryFilter1([in] long Id1, [out, retval] IReferenceService** Self);

	[id(3), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 2 categories.")]
	HRESULT CategoryFilter2([in] long Id1, [in] long Id2, [out, retval] IReferenceService** Self);

	[id(4), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 3 categories.")]
	HRESULT CategoryFilter3([in] long Id1, [in] long Id2, [in] long Id3, [out, retval] IReferenceService** Self);

	[id(5), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 4 categories.")]
	HRESULT CategoryFilter4([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [out, retval] IReferenceService** Self);

	[id(6), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter. Convenience method taking 5 categories.")]
	HRESULT CategoryFilter5([in] long Id1, [in] long Id2, [in] long Id3, [in] long Id4, [in] long Id5, [out, retval] IReferenceService** Self);

	[id(7), helpstring("Adds the \"filter\" custom parameter to the query. Specifically, it adds the \"categories\" filter."), vararg]
	HRESULT CategoryFilter([in] SAFEARRAY(VARIANT) Categories, [out, retval] IReferenceService** Self);
};

//*****************************************************************************
//* library WineApi
//*****************************************************************************

[
	uuid(4E908787-08CA-45C6-B1C3-4CBED04EF017),
	version(1.0),
	helpstring("WineApi 1.0 Type Library")
]
library WineApi
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	enum ReturnCode;
	enum SortOptions;
	enum SortDirection;

	interface IAppellation;
	interface IArea;
	interface IArticle;
	interface IBook;
	interface ICategory;
	interface ICategoryMap;
	interface ICommunity;
	interface ICommunityReview;
	interface ICommunityReviews;
	interface IFootnote;
	interface IGeoLocation;
	interface ILabel;
	interface IProduct;
	interface IProductAttribute;
	interface IProducts;
	interface IRating;
	interface IRatings;
	interface IReference;
	interface IRefinement;
	interface IRegion;
	interface IRetail;
	interface IStatus;
	interface IVarietal;
	interface IVineyard;
	interface IVintage;
	interface IVintages;
	interface IWineType;

	//*************************************************************************
	//* coclass Config
	//*************************************************************************

	[
		uuid(DE19ADA9-9E50-482C-B055-ECF7E51355C0),
		helpstring("Use this (singleton) class to configure WineApi.")
	]
	coclass Config
	{
		[default] interface IConfig;
	};

	//*************************************************************************
	//* coclass CategoryMapService
	//*************************************************************************

	[
		uuid(AF59A41C-084E-45B6-905E-29232E541B86),
		helpstring("This query returns the various categories and their children. These categories can then be used to retrieve products using the \"filter\" option.")
	]
	coclass CategoryMapService
	{
		[default] interface ICategoryMapService;
	};

	//*************************************************************************
	//* coclass CatalogService
	//*************************************************************************

	[
		uuid(C54236C1-15ED-4F59-86C5-5CBF1C1B096F),
		helpstring("Catalog queries give complete access to the Wine.com product catalog, including professional ratings, labels, styles of wines, and all other attributes associated with Wines.")
	]
	coclass CatalogService
	{
		[default] interface ICatalogService;
	};

	//*************************************************************************
	//* coclass ReferenceService
	//*************************************************************************

	[
		uuid(287E784F-BD1F-458E-8A3D-58907F71E5EB),
		helpstring("The reference library API exposes all of the articles, blogs, and content Wine.com has about wine.")
	]
	coclass ReferenceService
	{
		[default] interface IReferenceService;
	};
};
